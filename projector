#!/bin/bash


# Get the functions
source "$BUILDERDIR/global.sh"




# Check if current folder is a project folder (project-name/)
if [[ -f "${BASEDIR}/local.env" ]] || [[ -f "${BASEDIR}/.env" ]]; then


	# Extract the project name from BASEDIR
	SLUG="${BASEDIR%"${BASEDIR##*[!/]}"}"
	SLUG="${SLUG##*/}"
	#echo "Project name: $SLUG"


	# Project directory
	PROJECTDIR=$BASEDIR


fi # If current folder is a project folder




# Ask for the action, if not specified
ACTION=$1
if [[ -z $ACTION ]]; then


	echo ""
	echo -e "${GREEN}GENERAL USAGE:${RESET} projector <action> <project-name[if not in project folder]> <option[optional]>"
	echo ""
	echo "== Allowed Actions ===================="
	echo ""
	echo -e "${BLUE}starter${RESET} - Create a new project from scratch"
	echo -e "${BLUE}clone${RESET} - Clone a project from Git"
	echo -e "${BLUE}install${RESET} - Install a project that already clonned or created"
	echo -e "${BLUE}uninstall${RESET} - Uninstall a project that already installed"
	echo -e "   Options:"
	echo -e "       Default - Uninstall a project that already installed"
	echo -e "       --remove - Removes the project folder after uninstallation"
	echo -e "${BLUE}pull${RESET} - Pull the latest changes from Git"
	echo -e "   Options:"
	echo -e "       Default - Pull the latest changes from Git"
	echo -e "       --hard - Gets all the latest changes from Git"
	echo -e "       --import - Import site and DB files externally"
	echo -e "${BLUE}push${RESET} - Push the latest local changes to Git"
	echo -e "${BLUE}start${RESET} - Run the server and Node JS of an installed project"
	echo -e "   Options:"
	echo -e "       Default - Run the server and Node JS of an installed project"
	echo -e "       --hard - Gets all the latest changes from Git and start regularly"
	echo -e "       --import - Import site and DB files externally and start regularly"
	echo -e "${BLUE}stop${RESET} - Stop the servers of an installed project"
	echo -e "${BLUE}permission-fix${RESET} - If you get permission errors, do this"
	echo -e "   Options:"
	echo -e "       Default - Permission fix on .git folder and site folder"
	echo -e "       --git - Permission fix on .git folder"
	echo -e "       --server - Permission fix on Docker Container"
	echo -e "       --permission - Permission fix on site folder"
	echo -e "       --all - Permission fix on .git folder, site folder, and Docker container"
	echo -e "${BLUE}import${RESET} - Import an existing files to a project"
	echo ""
	echo "================================="
	echo ""

	read -ep "Write the action type: " ACTION
	if [[ -z $ACTION ]]; then

		echo -e "${RED}No action entered.${RESET}"
		exit

	fi


fi


# If unknown answer
if [[ $ACTION != starter ]] && [[ $ACTION != clone ]] && [[ $ACTION != install ]] && [[ $ACTION != uninstall ]] && [[ $ACTION != start ]] && [[ $ACTION != stop ]] && [[ $ACTION != pull ]] && [[ $ACTION != push ]] && [[ $ACTION != permission-fix ]] && [[ $ACTION != import ]]; then

	echo -e "${RED}Wrong action.${RESET}"
	exit

fi




# If it's under current folder (Projects/project-name)
if [[ -z $SLUG ]] && [[ -z $PROJECTDIR ]]; then


	# Get project name from args
	if [[ ! -z $2 ]]; then

		SLUG=$2

	else


		# Ask for the project name
		read -ep "Project name (site-name): " SLUG
		while [[ -z $SLUG ]]; do
			read -ep "Project name (site-name): " SLUG
		done


	fi


	# Project directory
	PROJECTDIR="${BASEDIR}/${SLUG}"


fi




# Installation Check
INSTALLED="no"
if [[ -f "$PROJECTDIR/.env" ]]; then


	# Get data from .env file
	source "$PROJECTDIR/.env"


	if [[ $IP != "127.0.0.1" ]]; then

		INSTALLED="yes"

	fi # If already installed


fi # If has an .env file




##Â DO THE ACTION:
if [[ -f "$BUILDERDIR/actions/$ACTION" ]]; then

	source "$BUILDERDIR/actions/$ACTION"

else

	echo -e "${RED}Action couldn't be found.${RESET}"
	exit

fi