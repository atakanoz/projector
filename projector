#!/bin/bash


# Get the functions
source "$BUILDERDIR/global.sh"




# Check if current folder is a project folder (project-name/)
if [[ -f "${BASEDIR}/local.env" ]] || [[ -f "${BASEDIR}/.env" ]]; then


	# Extract the project name from BASEDIR
	SLUG="${BASEDIR%"${BASEDIR##*[!/]}"}"
	SLUG="${SLUG##*/}"
	#echo "Project name: $SLUG"


	# Project info
	PROJECTNAME=$SLUG
	PROJECTDIR=$BASEDIR


fi # If current folder is a project folder




# Ask for the action, if not specified
ACTION=$1
if [[ -z $ACTION ]]; then


	echo ""
	echo -e "${GREEN}GENERAL USAGE:${RESET} projector <action> <project-name[if not in project folder]> <option[optional]>"
	echo ""
	echo "== PROJECTOR v0.1 - Allowed Actions ===================="
	echo ""
	echo -e "${BLUE}starter${RESET}          Create a new project from scratch"
	echo -e "   Options:"
	echo -e "     --existing         In development: Start with an existing site"
	echo -e ""
	echo -e "${BLUE}clone${RESET}            Clone a project from Git"
	echo -e ""
	echo -e "${BLUE}install${RESET}          Install a project that already clonned or created"
	echo -e ""
	echo -e "${BLUE}uninstall${RESET}        Uninstall a project that already installed"
	echo -e "   Options:"
	echo -e "     --remove           Removes the project folder after uninstallation"
	echo -e ""
	echo -e "${BLUE}pull${RESET}             Pull the latest changes from Git"
	echo -e "   Options:"
	echo -e "     --hard             Gets all the latest changes from Git"
	echo -e "     --import           Import site and DB files externally"
	echo -e ""
	echo -e "${BLUE}push${RESET}             Push the latest local changes to Git"
	echo -e ""
	echo -e "${BLUE}start${RESET}            Run the server and Node JS of an installed project"
	echo -e "   Options:"
	echo -e "     --nonode           Only runs the server, no Node JS installation"
	echo -e "     --hard             Gets all the latest changes from Git and start regularly"
	echo -e "     --import           Import site and DB files externally and start regularly"
	echo -e ""
	echo -e "${BLUE}stop${RESET}             Stop the servers of an installed project"
	echo -e ""
	echo -e "${BLUE}permission-fix${RESET}   Permission fix on .git folder and site folder. If you get permission errors, do this"
	echo -e "   Options:"
	echo -e "     --git              Permission fix on .git folder"
	echo -e "     --server           Permission fix on Docker Container"
	echo -e "     --permission       Permission fix on site folder"
	echo -e "     --all              Permission fix on .git folder, site folder, and Docker container"
	echo -e ""
	echo -e "${BLUE}export${RESET}           Exports the theme folder zip and DB for a live site"
	echo -e ""
	echo ""
	echo "================================="
	echo ""

	read -ep "Write the action type: " ACTION
	if [[ -z $ACTION ]]; then

		echo -e "${RED}No action entered.${RESET}"
		exit

	fi


fi


# If unknown answer
if [[ $ACTION != starter ]] && [[ $ACTION != clone ]] && [[ $ACTION != install ]] && [[ $ACTION != uninstall ]] && [[ $ACTION != start ]] && [[ $ACTION != stop ]] && [[ $ACTION != pull ]] && [[ $ACTION != push ]] && [[ $ACTION != permission-fix ]] && [[ $ACTION != export ]]; then

	echo -e "${RED}Wrong action.${RESET}"
	exit

fi




# If it's under current folder (Projects/project-name)
if [[ -z $SLUG ]] && [[ -z $PROJECTDIR ]]; then


	# Get project name from args
	if [[ ! -z $2 ]]; then

		SLUG=$2

	else


		# List the projects available
		ls

		# Ask for the project name
		read -ep "Project name (site-name): " SLUG
		while [[ -z $SLUG ]]; do
			read -ep "Project name (site-name): " SLUG
		done


	fi


	# Remove slash at the end
	SLUG=${SLUG%/}


	# Project info
	PROJECTNAME=$SLUG
	PROJECTDIR="${BASEDIR}/${SLUG}"


fi




# Installation Check
INSTALLED="no"
if [[ -f "$PROJECTDIR/.env" ]]; then


	# Get data from .env file
	source "$PROJECTDIR/.env"
	SLUG=$PROJECTNAME


	if [[ $IP != "127.0.0.1" ]]; then

		INSTALLED="yes"

	fi # If already installed


fi # If has an .env file




##Â DO THE ACTION:
if [[ -f "$BUILDERDIR/actions/$ACTION" ]]; then

	source "$BUILDERDIR/actions/$ACTION"

else

	echo -e "${RED}Action couldn't be found.${RESET}"
	exit

fi