#!/bin/bash




# Check if the folder not exists
if [[ ! -d "$PROJECTDIR" ]]; then

	echo -e "${RED}Project doesn't exist.${RESET}"
	exit

fi




# Check if installed
if [[ $INSTALLED != "yes" ]]; then

	echo -e "${RED}Project is not installed.${RESET}"
	exit

fi




# Check if git exist
if [[ ! -d "$PROJECTDIR/.git" ]] && [[ $OPTION1 != --dbdump ]]; then

	echo -e "${RED}Project doesn't have any git repository.${RESET}"
	exit

fi




# Ask for the push type
if [[ -z $OPTION1 ]]; then

	read -ep "Which files would you like to push? (files | db | all): " pushtype
	[[ -z $pushtype ]] && exit || sleep 0

	OPTION1="--$pushtype"

fi




# Save the DB backup
if [[ $OPTION1 != --files ]]; then

	db_backup

fi

# Early exit if only db backup requested
[[ $OPTION1 == --dbdump ]] && exit || sleep 0




(

	# Open the site directory
	cd "$PROJECTDIR"



	if [[ $OPTION1 == --files ]]; then


		# Stage all the changes
		printf "Staging the file changes ..."
		git add -A "$PROJECTDIR/wp"
		echo -e " ${GREEN}done${RESET}"


	elif [[ $OPTION1 == --db ]]; then


		# Stage all the changes
		printf "Staging the DB changes ..."
		git add -A "$PROJECTDIR/database"
		echo -e " ${GREEN}done${RESET}"


	else


		# Stage all the changes
		echo "Staging all the changes ..."
		git add -A .
		echo -e " ${GREEN}done${RESET}"


	fi




	# Show the git status
	echo "Showing the git status..."
	git status
	echo -e "Show the git status ... ${GREEN}done${RESET}"




	# Ask for the commit message
	while [[ -z "$COMMIT_MESSAGE" ]]; do

		read -ep "Commit Message: " COMMIT_MESSAGE

	done




	# Commit the changes
	echo "Committing the changes..."
	git commit -m "$COMMIT_MESSAGE"
	echo -e "Commit the changes ... ${GREEN}done${RESET}"




	# Push the changes
	echo "Pushing the changes..."
	if git push;then

		echo -e "${GREEN}PUSHING COMPLETE${RESET}"

	else

		# Do a git pull
		unset OPTION1
		source "$BUILDERDIR/actions/pull"
		echo -e "${RED}Please check the conflicts on Visual Studio Code${RESET}"

	fi

)