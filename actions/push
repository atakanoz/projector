#!/bin/bash




# Check if the folder not exists
if [[ ! -d "$PROJECTDIR" ]]; then

	echo -e "${RED}Project doesn't exist.${RESET}"
	exit

fi




# Check if git exist
if [[ ! -d "$PROJECTDIR/.git" ]]; then

	echo -e "${RED}Project doesn't have any git repository.${RESET}"
	exit

fi




# Pull the changes and start
PERMISSIONFIX="no"
source "$BUILDERDIR/actions/pull"




# Ask for the push type
if [[ -z $OPTION1 ]] && [[ -z $OPTION2 ]]; then

	read -ep "Which files would you like to push? (files | db | all): " pushtype
	[[ -z $pushtype ]] && exit || sleep 0

	OPTION1="--$pushtype"

fi




# Save the DB backup
if [[ $OPTION1 != --files ]] && [[ $OPTION2 != --files ]]; then


	# Check if installed
	if [[ $INSTALLED != "yes" ]]; then

		echo -e "${RED}Project is not installed to be able to push DB changes.${RESET}"
		exit

	fi



	db_backup

fi




(

	# Open the site directory
	cd "$PROJECTDIR"



	if [[ $OPTION1 == --files ]] || [[ $OPTION2 == --files ]]; then


		# Stage all the changes
		printf "Staging the file changes ..."
		sudo git add -A "$PROJECTDIR/wp"
		echo -e " ${GREEN}done${RESET}"


	elif [[ $OPTION1 == --db ]] || [[ $OPTION2 == --db ]]; then


		# Stage all the changes
		printf "Staging the DB changes ..."
		sudo git add -A "$PROJECTDIR/database"
		echo -e " ${GREEN}done${RESET}"


	else


		# Stage all the changes
		echo "Staging all the changes ..."
		sudo git add -A .
		echo -e " ${GREEN}done${RESET}"


	fi




	# Show the git status
	echo "Showing the git status..."
	sudo git status
	echo -e "Show the git status ... ${GREEN}done${RESET}"




	# Ask for the commit message
	while [[ -z "$COMMIT_MESSAGE" ]]; do

		read -ep "Commit Message: " COMMIT_MESSAGE

	done




	# Commit the changes
	echo "Committing the changes..."
	sudo git commit -m "$COMMIT_MESSAGE"
	echo -e "Commit the changes ... ${GREEN}done${RESET}"




	# Detect remote
	if sudo git remote get-url --all origin &> /dev/null; then
	
	
		# Push the changes
		echo "Pushing the changes..."
		if sudo git push;then

			echo -e "${GREEN}PUSHING COMPLETE${RESET}"

		else

			# Do a git pull
			unset OPTION1
			source "$BUILDERDIR/actions/pull"
			echo -e "${RED}Please check the conflicts on Visual Studio Code${RESET}"

		fi

	
	else

		echo -e "${BLUE}Push skipped. No remote added.${RESET}"
	
	fi

)