#!/bin/bash




# Check if the folder not exists
if [[ ! -d $PROJECTDIR ]]; then

	echo -e "${RED}Project doesn't exist.${RESET}"
	exit

fi




# Hard pull confirmation
if [[ $OPTION1 == --hard ]]; then

	read -ep "Are you sure you want to get latest changes from Git? This will replace all the changes you might have done. (yes | no): " confirm

fi


# Import confirmation
if [[ $OPTION1 == --import ]]; then

	read -ep "Are you sure you want to replace all the changes you might have done? (yes | no): " confirm

fi




if [[ $OPTION1 == --hard ]] || [[ $OPTION1 == --import ]]; then


	# Confirmation check
	if [[ $confirm != "yes" ]] && [[ $confirm != "y" ]]; then

		echo -e "${RED}Not confirmed.${RESET}"
		exit

	fi


	# Create the current DB backup
	if [[ -d "${PROJECTDIR}/database/mysql" ]]; then

		db_backup

	fi

fi




# DETECT DB CHANGES
DB_FILE="$PROJECTDIR/database/dump/wordpress_data.sql"
DB_SUM1=$(md5 -r $DB_FILE)




if [[ $OPTION1 == --import ]]; then


	# Move import files
	move_import_files


else


	# Pulling latest changes from git
	if [[ -d "$PROJECTDIR/.git" ]]; then


		(
			cd $PROJECTDIR

			if [[ $OPTION1 == --hard ]]; then


				echo "Hard reset..."


				# Make 'mysql' folder temporary
				if [[ -d "${PROJECTDIR}/database/mysql" ]]; then

					echo "Making 'mysql' folder temporary..."
					cp -rf "${PROJECTDIR}/database/mysql" "$BUILDERDIR/temp/${SLUG}_mysql"
					echo -e "Make 'mysql' folder temporary ... ${GREEN}done${RESET}"

				fi


				echo "Fetching..."
				git fetch
				git reset --hard origin/master
				git clean -dfx
				echo -e "Fetching ... ${GREEN}done${RESET}"


				echo -e "Hard reset ... ${GREEN}done${RESET}"


			fi


			echo "Checking the latest remote changes..."
			git pull
			echo -e "Git pull ... ${GREEN}done${RESET}"
		)


	fi


fi




# Re-install the WP core files and DB
if [[ $OPTION1 == --hard ]]; then


	# Make the DB importable
	if [[ -d "$BUILDERDIR/temp/${SLUG}_mysql" ]]; then

		echo "Making 'mysql' folder permanent..."
		mv "$BUILDERDIR/temp/${SLUG}_mysql" "${PROJECTDIR}/database/mysql"
		echo -e "Make 'mysql' folder permanent ... ${GREEN}done${RESET}"

	fi


	# Download the WP
	if [[ ! -f "$PROJECTDIR/wp/wp-config.php" ]] && [[ $INSTALLED == "yes" ]]; then


		# Recreate the .env file
		update_environment


		# Download the WP files
		echo -e "WP files adding..."
		wp core download --version=$WP_VERSION --skip-content --force
		echo -e "WP Files added ... ${GREEN}done${RESET}"


		# Create the config file
		echo -e "DB info updating..."
		wp config create --dbname=wordpress_data --dbuser=root --dbpass=password --dbhost=db --force
		echo -e "DB info updated ... ${GREEN}done${RESET}"


	fi


fi




# DETECT DB CHANGES
DB_SUM2=$(md5 -r $DB_FILE)
if [[ $DB_SUM1 != $DB_SUM2 ]]; then


	echo "DB changed."


	# If installed
	if [[ $INSTALLED == "yes" ]]; then


		# Import the DB
		db_import "${PROJECTDIR}/database/dump/wordpress_data.sql"


		# Ask the registered URL and do the replacements
		db_url_update


		# Rewrite Flush
		wp rewrite flush --hard


	else

		echo "Old data removing..."
		rm -rf "${PROJECTDIR}/database/mysql/"
		echo -e "Remove old data ... ${GREEN}done${RESET}"


		echo -e "${GREEN}Server needs to be installed to apply DB changes.${RESET}"

	fi


else

	echo "DB is identical."

fi




# Permission fix needed
if [[ $OPTION1 == --hard ]] || [[ $OPTION1 == --import ]]; then

	git_permission_update "$PROJECTDIR/.git"
	permission_update "$PROJECTDIR/"

fi




echo -e "${GREEN}PULLING COMPLETE${RESET}"